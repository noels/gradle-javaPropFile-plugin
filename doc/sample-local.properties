# This file is pretending to be private/unshared/local.
# In a real project, you would not check this file into your SCM system.
# You can override Project or 'app.properties' setting shere.
# (Some Project properties are read-only, but you will be notified if you try
# to change them).
#
# Use ISO-8859-1 encoding.  (This applies to all Java properties files)


# Since in our example, we have set unsatisfiedRefBehavior to NO_SET, the
# following line will have no effect at all, since it references an satisfied
# property.
alpha=Embedded property ${defined.nowhere} isn't defined anywhere

# You can use Project properties in references, and you can change those that
# Gradle lets you update.
title=This project is '${name}'
group=org.fake
# Change Gradle's 'version' property.
version=${version}.SNAPSHOT

# Since we're allowing overwriting (the default), let's change the values set
# in our 'app.properties file.
jdbcImpl.default=${jdbcImpl.default}-beta
mailhost.default=mail.my.org

# Since we have set typeCasting, I can do fancy stuff like this:
# Note that the referenced ${dest.path} is defined later on.
dest.file(File)=${dest.path}
preferences(File)=${user.home}${file.separator}/prefs.txt
# Assign a null value:
backup.file()=
xfer.maxTime(Float)=12.345
# Since Java Properties and Maps may not contain Java primitive types, the
# closest you can get to that is using the JDK primitive-wrapper classes,
# which is usually indistinguishable from primitive use when using Groovy.
javac.debug(Boolean)=true

# Since system variables references are expanded by default, we can do this:
dest.path=tmp${file.separator}${nested.var}.txt

# In some nesting examples, I'll refer to property 'nested.var'.
# I could assign it here, but to show you that you can reference properties
# before they are assigned (in the same file though!), I'm doing it later.

# In our example, we have assigned systemPropPrefix to 'sys$', so we can set
# (or change, since we are also allowing overwriting) system properties.
sys$java.io.tmpdir=${user.home}${file.separator}${nested.var}


# Setting property used in ${references} above.
nested.var=xyz

# JavaPropFile does not allow changing a non-null property to a different type.
# Here we work around this constraint by changing 'startAsFile' to a String.
# First assign null to it.
startAsFile()=
# Then we can assign whatever we want to it.
startAsFile=A string value

        nestee=1
        nester1=${nestee}
        nestee=2
        nester2=${nestee}
