# This file is pretending to be private/unshared/local.
# In a real project, you would not check this file into your SCM system.
# You can override Project or 'app.properties' setting shere.
# (Some Project properties are read-only, but you will be notified if you try
# to change them).
#
# Use ISO-8859-1 encoding.  (This applies to all Java properties files)


# Since in our example, we have set unsatisfiedRefBehavior to NO_SET, the
# following line will have no effect at all, since it references an satisfied
# property.
alpha=Embedded property ${defined.nowhere} isn't defined anywhere

# You can use Project properties in references, and you can change those that
# Gradle lets you update.
title=This project is '${name}'
group=org.fake
# Change Gradle's 'version' property.
version=${version}.SNAPSHOT

# Since we're allowing overwriting (the default), let's change the values set
# in our 'app.properties file.
jdbcImpl.default=${jdbcImpl.default}-beta
mailhost.default=mail.my.org

# Since we have set typeCasting, I can do fancy stuff like this:
# Note that the referenced ${dest.path} is defined later on.
dest.file(File)=${dest.path}
preferences(File)=${sys|user.home}${sys|file.separator}/prefs.txt
# Assign a null value:
backup.file()=
# Since Java Properties and Maps may not contain Java primitive types, the
# closest you can get to that is using the JDK primitive-wrapper classes,
# which is usually indistinguishable from primitive use when using Groovy.
xfer.maxTime(Float)=12.345

# The dot in "buildFile.name" is not a character in property name
# "buildFile.name", but indicates to dereference the object for property
# 'buildFile', just like in Groovy.  You make '.' into a dereference operator
# like this by using space as the first (or only) character separating the
# property name stuff from the property value stuff.
buildFileBaseName =${buildFile.name}
# The following example shows that when you set '.' to behave like this, it
# effects both ${...} references and property names.

# Here is a combination of typecasting (with '(Boolean)') and
# dot-referencing (from 'compileJava.options... =', notice the space).
compileJava.options.debug(Boolean) =false

# The $ in the property name says to set a property on (or under) the named
# preceding extension object instead of on (or under) the Project object.
# This can be used both on the left-hand-side to set configure extension
# objects, and on the right to reference them like this: ${extObjName$prop}.
is.typecasting(Boolean)=${propFileLoader$typeCasting}

# Since we left 'systemPropPrefix' set to 'sys|', we can set and reference
# system properties:
dest.path=tmp${sys|file.separator}${nested.var}.txt

# In some nesting examples, I'll refer to property 'nested.var'.
# I could assign it here, but to show you that you can reference properties
# before they are assigned (in the same file though!), I'm doing it later.

# As noted above, a non-null 'systemPropPrefix' setting also allows us to set
# (or change, since we are also allowing overwriting) system properties.
sys|java.io.tmpdir=${sys|user.home}${sys|file.separator}${nested.var}


# Setting property used in ${references} above.
nested.var=xyz

# JavaPropFile does not allow changing a non-null property to a different type.
# Here we work around this constraint by changing 'startAsFile' to a String.
# (startAsFile is set to a File object by "build.gradle").
# First assign null to it.
startAsFile()=
# Then we can assign whatever we want to it.
startAsFile=A string value
