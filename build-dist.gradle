apply plugin: 'maven'
apply plugin: 'signing'

signing {
    sign configurations.archives
}

apply from: 'build.gradle'
defaultTasks 'uploadArchives'

artifacts {
     archives sourcesJar
     archives javadocJar
}

configurations { deployJars }

assert fileTree(dir: 'build/libs', include: 'gradle-javaPropFile-plugin-*.jar').
    singleFile.exists():
'''Due to boot-strapping issue, you must build the jar with 'build.gradle'
before you can use build file 'build-dist.gradle.
'''

buildscript { dependencies {
    classpath fileTree(
        dir: 'build/libs', include: 'gradle-javaPropFile-plugin-*.jar')
    }
}
apply plugin: 'javaPropFile'
propFileLoader.load(file('local.properties'))

if (project.hasProperty('mavenRepository.dest.url')
        && project.property('mavenRepository.dest.url').startsWith('scp://')) {
    repositories { mavenCentral() }
    dependencies {
        deployJars 'org.apache.maven.wagon:wagon-ssh:latest.milestone'
    }
}

// description attribute of project is always set, but may be null
if (!project.hasProperty('description') ||
        project.property('description') == null)
    project.description = '''Load Gradle Project with properties from Java properties files'''

uploadArchives {
    /*
    if (!project.hasProperty('mavenRepository.dest.url'))
        // This crap just to satisfy load-time requirement when the
        // uploadArchives task won't even be used.
        project.setProperty('mavenRepository.dest.url', '')
    */
    def authMap = [:]
    if (project.hasProperty('mavenRepository.dest.username'))
        authMap['userName'] = project.property('mavenRepository.dest.username')
    if (project.hasProperty('mavenRepository.dest.password'))
        authMap['password'] = project.property('mavenRepository.dest.password')
    if (project.hasProperty('mavenRepository.dest.privateKey'))
        authMap['privateKey'] =
                project.property('mavenRepository.dest.privateKey')

    repositories.mavenDeployer {
        configuration = configurations.deployJars
        beforeDeployment { MavenDeployment deployment -> signPom(deployment) }
        if (project.hasProperty('mavenRepository.dest.url'))
            repository(url: project.property('mavenRepository.dest.url')) {
                authentication(authMap)
            }
        pom.project {
            name 'JavaPropFile Gradle Plugin'
            description project.description
            if (project.hasProperty('url')) url project.property('url')
            if (project.hasProperty('inceptionYear'))
                inceptionYear project.property('inceptionYear')
            scm {
                if (project.hasProperty('scm.url'))
                    url project.property('scm.url')
                if (project.hasProperty('scm.connection'))
                    connection project.property('scm.connection')
                if (project.hasProperty('scm.tag'))
                    tag project.property('scm.tag')
            }
            if (project.hasProperty('org.name')
                    || project.hasProperty('org.url')) organization {
                if (project.hasProperty('org.name'))
                    name project.property('org.name')
                if (project.hasProperty('org.url'))
                    url project.property('org.url')
            }
            licenses {
                license {
                    name 'Apache 2.0'
                    url 'https://raw.github.com/unsaved/gradle-javaPropFile-plugin/master/doc/LICENSE.txt'
                    distribution 'repo'
                }
            }
            if (project.hasProperty('developer.name')
                    || project.hasProperty('developer.email')) developers {
                developer {
                    if (project.hasProperty('developer.id'))
                        id project.property('developer.id')
                    if (project.hasProperty('developer.name'))
                        name project.property('developer.name')
                    if (project.hasProperty('developer.email'))
                        email project.property('developer.email')
                }
            }
        }
    }
}

uploadArchives { doFirst {
    assert project.hasProperty('group') && project.group != '' :
            '''Property 'group' is required by 'uploadArchives' task.
'''
    assert project.hasProperty('mavenRepository.dest.url'):
    '''Property 'mavenRepository.dest.url' is required by 'uploadArchives' task.'''

    assert (project.hasProperty('scm.connection')
            && project.hasProperty('scm.url')
            && project.hasProperty('url')
            && project.hasProperty('inceptionYear')) :
            '''Following properties required for 'uploadArchives' task:
    'scm.connection, scm.url, url, inceptionYear'.
'''
} }
